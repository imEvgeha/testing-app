{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as types from \"../types\";\n\nvar main = function main() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    data: [{\n      body: \"TESTING\",\n      id: 2,\n      title: \"TESTING\"\n    }]\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.GET_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: [].concat(_toConsumableArray(data), [action.payload])\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default main;","map":{"version":3,"sources":["/Users/user/Documents/MyDocuments/Projects/testing-app/redux/reducers/main.js"],"names":["types","main","state","data","body","id","title","action","type","GET_POSTS","payload"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAQC;AAAA,MARAC,KAQA,uEARQ;AACpBC,IAAAA,IAAI,EAAE,CACJ;AACEC,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,EAAE,EAAE,CAFN;AAGEC,MAAAA,KAAK,EAAE;AAHT,KADI;AADc,GAQR;AAAA,MAAXC,MAAW;;AACZ,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,KAAK,CAACS,SAAX;AACE,6CAAYP,KAAZ;AAAmBC,QAAAA,IAAI,+BAAOA,IAAP,IAAaI,MAAM,CAACG,OAApB;AAAvB;;AAEF;AACE,aAAOR,KAAP;AALJ;AAOD,CAhBD;;AAkBA,eAAeD,IAAf","sourcesContent":["import * as types from \"../types\";\n\nconst main = (state = {\n  data: [\n    {\n      body: \"TESTING\",\n      id: 2,\n      title: \"TESTING\",\n    }\n  ]\n}, action) => {\n  switch (action.type) {\n    case types.GET_POSTS:\n      return { ...state, data: [ ...data, action.payload ]}\n  \n    default:\n      return state;\n  }\n}\n\nexport default main;"]},"metadata":{},"sourceType":"module"}
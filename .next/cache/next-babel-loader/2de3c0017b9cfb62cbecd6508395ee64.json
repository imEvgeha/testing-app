{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from \"../types\";\n\nconst main = (state = {\n  data: [],\n  openedMessage: {}\n}, action) => {\n  switch (action.type) {\n    case types.SET_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload\n      });\n\n    case types.OPENED_MESSAGE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        openedMessage: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default main;","map":{"version":3,"sources":["/Users/user/Documents/MyDocuments/Projects/testing-app/redux/reducers/main.js"],"names":["types","main","state","data","openedMessage","action","type","SET_POSTS","payload","OPENED_MESSAGE"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG;AACpBC,EAAAA,IAAI,EAAE,EADc;AAEpBC,EAAAA,aAAa,EAAE;AAFK,CAAT,EAGVC,MAHU,KAGC;AACZ,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,KAAK,CAACO,SAAX;AACE,6CAAYL,KAAZ;AAAmBC,QAAAA,IAAI,EAAEE,MAAM,CAACG;AAAhC;;AAEF,SAAKR,KAAK,CAACS,cAAX;AACE,6CAAWP,KAAX;AAAkBE,QAAAA,aAAa,EAAEC,MAAM,CAACG;AAAxC;;AAEF;AACE,aAAON,KAAP;AARJ;AAUD,CAdD;;AAgBA,eAAeD,IAAf","sourcesContent":["import * as types from \"../types\";\n\nconst main = (state = {\n  data: [],\n  openedMessage: {}\n}, action) => {\n  switch (action.type) {\n    case types.SET_POSTS:\n      return { ...state, data: action.payload}\n    \n    case types.OPENED_MESSAGE:\n      return {...state, openedMessage: action.payload}\n\n    default:\n      return state;\n  }\n}\n\nexport default main;"]},"metadata":{},"sourceType":"module"}
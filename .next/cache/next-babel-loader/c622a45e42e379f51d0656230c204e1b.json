{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport { GET_POSTS } from \"../types\";\n\nconst main = (state = {\n  data: [{\n    body: \"TESTING\",\n    id: 2,\n    title: \"TESTING\"\n  }]\n}, action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: [...data, {\n          body: action.body,\n          id: action.id,\n          title: action.title\n        }]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default main;","map":{"version":3,"sources":["/Users/user/Documents/MyDocuments/Projects/testing-app/redux/reducers/main.js"],"names":["GET_POSTS","main","state","data","body","id","title","action","type"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,UAA1B;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG;AACpBC,EAAAA,IAAI,EAAE,CACJ;AACEC,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,EAAE,EAAE,CAFN;AAGEC,IAAAA,KAAK,EAAE;AAHT,GADI;AADc,CAAT,EAQVC,MARU,KAQC;AACZ,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,SAAL;AACE,6CAAYE,KAAZ;AAAmBC,QAAAA,IAAI,EAAE,CAAE,GAAGA,IAAL,EACvB;AACEC,UAAAA,IAAI,EAAEG,MAAM,CAACH,IADf;AAEEC,UAAAA,EAAE,EAAEE,MAAM,CAACF,EAFb;AAGEC,UAAAA,KAAK,EAAEC,MAAM,CAACD;AAHhB,SADuB;AAAzB;;AAQF;AACE,aAAOJ,KAAP;AAXJ;AAaD,CAtBD;;AAwBA,eAAeD,IAAf","sourcesContent":["export { GET_POSTS } from \"../types\";\n\nconst main = (state = {\n  data: [\n    {\n      body: \"TESTING\",\n      id: 2,\n      title: \"TESTING\",\n    }\n  ]\n}, action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return { ...state, data: [ ...data, \n        {\n          body: action.body,\n          id: action.id,\n          title: action.title,\n        }\n      ]}\n  \n    default:\n      return state;\n  }\n}\n\nexport default main;"]},"metadata":{},"sourceType":"module"}